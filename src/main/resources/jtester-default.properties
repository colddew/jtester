####################################
# Default configuration of jTester #
####################################

# This file contains default configuration values for jtester. 
# This file should not be edited.
# All properties in this file can be overridden, either in the project specific properties file (jtester.properties)
# or in the local properties file (configured by jtester.configuration.customFileName).

# Name or path of the project specific properties file. The system will try to find this file in the classpath (recommended),
# the user home folder or the local filesystem
jtester.configuration.customFileName=jtester.properties
# Name or path of the user specific properties file. This file may contain the necessary parameters to connect to the
# developer's own unit test schema. It is recommended to override the name of this file in the project specific properties
# file, to include the name of the project. The system will try to find this file in the classpath, the user home folder
# (recommended) or the local filesystem.
jtester.configuration.localFileName=jtester-local.properties

# Loading sequence of modules.
# Overloading this list is normally not useful, unless you want to add a custom module. 
# Disabling a module can be performed by setting jtester.module.<modulename>.enabled to false.
# If a module's specific dependencies are not found (e.g. hibernate is not in you classpath), this module is not loaded, even if it is in this list and the enabled property is set to true. 
# It's therefore not strictly necessary to disable any of these modules.
jtester.modules=database,dbfit,jmockit,spring,tracer,inject

#### jTester core configuration ###
# For each module, the implementation class is listed in jtester.module.<modulename>.className.
# Disabling a module can be performed by setting jtester.module.<modulename>.enabled to false.
jtester.module.database.className=org.jtester.module.core.DatabaseModule
jtester.module.database.enabled=true
jtester.module.database.enabled.class=

jtester.module.dbfit.className=org.jtester.module.core.DbFitModule
jtester.module.dbfit.enabled=true
jtester.module.dbfit.enabled.class=

jtester.module.jmockit.className=org.jtester.module.core.JMockitModule
jtester.module.jmockit.enabled=true
jtester.module.jmockit.enabled.class=mockit.Mockit

jtester.module.inject.className=org.jtester.module.core.InjectModule
jtester.module.inject.enabled=true
jtester.module.inject.enabled.class=

jtester.module.spring.className=org.jtester.module.core.SpringModule
jtester.module.spring.enabled=true
jtester.module.spring.enabled.class=org.springframework.context.support.AbstractApplicationContext

jtester.module.tracer.className=org.jtester.module.core.TracerModule
jtester.module.tracer.enabled=true
jtester.module.tracer.enabled.class=

# \u63d0\u793a\u4fe1\u606f\u7ea7\u522b DEBUG INFO WARNING ERROR
log.level = INFO
# \u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u7981\u6b62\u8c03\u7528\u7684\u529f\u80fd,\u6bd4\u5982\u8fdc\u7a0b\u8c03\u7528esb\u7b49
# \u76ee\u7684\u662f\u4ece\u6846\u67b6\u7ea7\u7981\u6b62\u7cfb\u7edf\u7ea7\u7684\u8c03\u7528\uff0c\u4fdd\u8bc1\u6d4b\u8bd5\u7684\u53ef\u7ef4\u62a4\u6027
# jtester.forbid.function=napoli,esb
jtester.forbid.function=
# jtester.forbid.napoli.implClass=xxxx
# jtester.forbid.esb.implClass=xxxx


### =========================  ###
### SpringModule configuration ###
### =========================  ###
# spring\u6a21\u5757ApplicationContextFactory\u7684\u5177\u4f53\u5b9e\u73b0\u7c7b #
SpringModule.ApplicationContextFactory.ImplClassName=org.jtester.module.spring.ClassPathXmlApplicationContextFactory
#\u4f7f\u7528jtester\u4e2d\u7684datasource\u66ff\u6362spring\u4e2did=${spring.datasource.name}\u7684datasource bean
#\u5e9f\u5f03\u7684\u5b9a\u4e49: spring.datasource.name=dataSource
SpringModule.DataSource.Name=dataSource


spring.core.someClass.name=org.springframework.core.io.Resource

### DatabaseModule Configuration ###

## Full qualified class name of an implementation of org.unitils.database.config.DataSourceFactory. This class is used
# to provide a DataSource for all database unit tests and for the DBMaintainer.
org.jtester.module.database.DataSourceFactory.implClassName=org.jtester.module.database.JTesterDataSourceFactory

#database.type=h2db
database.type=
database.driverClassName=
database.url=
database.userName=
database.password=
# A comma-separated list of all used database schemas. 
# The first schema name is the default one.
# A schema name is case sensitive if it's surrounded by database identifier quotes (e.g. " for oracle)
database.schemaNames=
# Supported values are 'oracle', 'mysql', 'postgresql', 'derby' and 'mssql'. 
# The value of this property defines which vendor specific implementations of DbSupport and ConstraintsDisabler are chosen.
database.dialect=
#\u662f\u5426\u53ea\u80fd\u8fde\u63a5\u672c\u5730\u6570\u636e\u5e93\u548c\u4ee5test\u5f00\u5934\u6216\u7ed3\u5c3e\u7684\u6570\u636e\u5e93
database.only.testdb.allowing=true

### DatabaseModule's DbMaintainer configuration ###

# If set to true, the DBMaintainer will be used to update the unit test database schema. This is done once for each
# test run, when creating the DataSource that provides access to the unit test database.
updateDataBaseSchema.enabled=false

# Indicates the database must be recreated from scratch when an already executed script is updated. If false, the
# DBMaintainer will give an error when an existing script is updated.
dbMaintainer.fromScratch.enabled=true
# Indicates whether a from scratch update should be performed when the previous update failed, but
# none of the scripts were modified since that last update. If false a new update will be tried only when
# changes were made to the script files.
dbMaintainer.keepRetryingAfterError.enabled=false

# Fully qualified classnames of implementations of org.unitils.core.dbsupport.DbSupport.
org.jtester.dbsupport.oracle=org.jtester.module.database.support.OracleDbSupport
org.jtester.dbsupport.oracle9=org.jtester.module.database.support.Oracle9DbSupport
org.jtester.dbsupport.oracle10=org.jtester.module.database.support.Oracle10DbSupport
org.jtester.dbsupport.hsqldb=org.jtester.module.database.support.HsqldbDbSupport
org.jtester.dbsupport.mysql=org.jtester.module.database.support.MySqlDbSupport
org.jtester.dbsupport.db2=org.jtester.module.database.support.Db2DbSupport
org.jtester.dbsupport.postgresql=org.jtester.module.database.support.PostgreSqlDbSupport
org.jtester.dbsupport.derby=org.jtester.module.database.support.DerbyDbSupport
org.jtester.dbsupport.mssql=org.jtester.module.database.support.MsSqlDbSupport
org.jtester.dbsupport.h2db=org.jtester.module.database.support.H2DbSupport

# Determines how the database stores non-quoted identifiers (with identifiers, we mean names for tables, columns, etc.) 
# Possible values are lower_case, upper_case, mixed_case and auto
# If auto is specified, the database metadata is used to determine the correct value
database.storedIndentifierCase.oracle=auto
database.storedIndentifierCase.hsqldb=auto
database.storedIndentifierCase.mysql=auto
database.storedIndentifierCase.db2=auto
database.storedIndentifierCase.postgresql=auto
database.storedIndentifierCase.derby=auto
database.storedIndentifierCase.mssql=auto
database.storedIndentifierCase.h2db=auto

# Determines the string the database uses to quote identifiers, i.e. make them case-sensitive 
# (with identifiers, we mean names for tables, columns, etc.)
# Leave empty if quoting is not supported.
# If auto is specified, the database metadata is used to determine the correct value
database.identifierQuoteString.oracle=auto
database.identifierQuoteString.hsqldb=auto
database.identifierQuoteString.mysql=auto
database.identifierQuoteString.db2=auto
database.identifierQuoteString.postgresql=auto
database.identifierQuoteString.derby=auto
database.identifierQuoteString.mssql=auto
database.identifierQuoteString.h2db=auto

# Fully qualified name of the implementation of org.unitils.dbmaintainer.maintainer.version.ExecutedScriptInfoSource that is used.
# The default value is 'org.unitils.dbmaintainer.maintainer.version.ExecutedScriptInfoSource', which retrieves the database version
# from the updated database schema itself. Another implementation could e.g. retrieve the version from a file.
org.unitils.dbmaintainer.version.ExecutedScriptInfoSource.implClassName=org.unitils.dbmaintainer.version.impl.DefaultExecutedScriptInfoSource
# Name of the table that contains the database update script that have already been executed on the database.
dbMaintainer.executedScriptsTableName=dbmaintain_scripts
# Name of the column in which the name of the executed script file is stored
dbMaintainer.fileNameColumnName=file_name
dbMaintainer.fileNameColumnSize=150
# Name of the column in which the version index string of the executed script is stored.
dbMaintainer.versionColumnName=version
dbMaintainer.versionColumnSize=25
# Name of the column in which the last modification date of the executed script file is stored.
dbMaintainer.fileLastModifiedAtColumnName=file_last_modified_at
# Name of the column in which the checksum of the content of the script is stored.
dbMaintainer.checksumColumnName=checksum
dbMaintainer.checksumColumnSize=50
# Name of the column that stores the timestamp at which the script was executed
dbMaintainer.executedAtColumnName=executed_at
dbMaintainer.executedAtColumnSize=20
# Name of the column in which is stored whether the script ran without error or not.
dbMaintainer.succeededColumnName=succeeded
# Set this property to true if the dbmaintain_scripts table should be created automatically if not found.
# If false, an exception is thrown when the table is not found, indicating how to create it manually. 
# This property is false by default to be sure that a database is cleared by accident. If an executed 
# scripts table is available, we assume it to be a database managed by dbmaintain.
dbMaintainer.autoCreateExecutedScriptsTable=false
dbMaintainer.timestampFormat=yyyy-MM-dd HH:mm:ss

# Fully qualified name of the implementation of org.unitils.dbmaintainer.maintainer.script.ScriptSource that is used.
# The default value is 'org.unitils.dbmaintainer.maintainer.script.FileScriptSource', which will retrieve the scripts
# from the local file system.
org.unitils.dbmaintainer.script.ScriptSource.implClassName=org.unitils.dbmaintainer.script.impl.DefaultScriptSource
# Defines where the scripts can be found that must be executed on the database. Multiple locations may be
# configured, separated by comma's. A script location can be a folder or a jar file.
dbMaintainer.script.locations=
# Extension of the files containing the database update scripts
dbMaintainer.script.fileExtensions=sql,ddl
# Comma separated list of directories and files in which the post processing database scripts are
# located. Directories in this list are recursively search for files.
dbMaintainer.postProcessingScript.directoryName=postprocessing

# Defines whether script last modification dates can be used to decide that it didn't change. If set to true,
# the dbmaintainer will decide that a file didn't change since the last time if it's last modification date hasn't
# changed. If it did change, it will first calculate the checksum of the file to verify that the content really
# changed. Setting this property to true improves performance: if set to false the checksum of every script must
# be calculated for each run of the dbmaintainer. It's advised to set this property to true when using the dbmainainer
# to update a unit test database. For applying changes to an environment that can only be updated incrementally (e.g. 
# a database use by testers or even the production database), this parameter should be false, since working with last 
# modification dates is not guaranteed to be 100% bulletproof (although unlikely, it is possible that a different 
# version of the same file is checked out on different systems on exactly the same time).
dbMaintainer.useScriptFileLastModificationDates.enabled=true

dbMaintainer.fileScriptSource.scripts.fileExtensions=sql

# Fully qualified name of the implementation of org.unitils.dbmaintainer.script.ScriptRunner that is used. The
# default value is 'org.unitils.dbmaintainer.script.SQLScriptRunner', which executes a regular SQL script.
org.unitils.dbmaintainer.script.ScriptRunner.implClassName=org.unitils.dbmaintainer.script.impl.DefaultScriptRunner
# Fully qualified classname of the implementation of org.unitils.dbmaintainer.script.ScriptParser
org.unitils.dbmaintainer.script.ScriptParser.implClassName=org.unitils.dbmaintainer.script.impl.DefaultScriptParser
org.unitils.dbmaintainer.script.ScriptParser.implClassName.oracle=org.unitils.dbmaintainer.script.impl.OracleScriptParser
org.unitils.dbmaintainer.script.ScriptParser.implClassName.oracle9=org.unitils.dbmaintainer.script.impl.OracleScriptParser
org.unitils.dbmaintainer.script.ScriptParser.implClassName.oracle10=org.unitils.dbmaintainer.script.impl.OracleScriptParser
# Set to true if characters can be escaped by using backslashes. For example '\'' instead of the standard SQL way ''''.
# Note this is not standard SQL behavior and is therefore disabled by default.
org.unitils.dbmaintainer.script.ScriptParser.backSlashEscapingEnabled=false

# If set to true, an implementation of org.unitils.dbmaintainer.constraints.ConstraintsDisabler will be used to disable
# the foreign key and not null constraints of the unit test database schema.
# The ConstraintsDisabler is configured using the properties specified below. The property with key 'database.dialect'
# specifies which implementation is used.
dbMaintainer.disableConstraints.enabled=false
# Fully qualified classname of the implementation of org.unitils.dbmaintainer.structure.ConstraintsDisabler
org.unitils.dbmaintainer.structure.ConstraintsDisabler.implClassName=org.jtester.module.database.DefaultConstraintsDisabler

# If set to true, all sequences and identity columns are set to a sufficiently high value, so that test data can be 
# inserted without having manually chosen test record IDs clashing with automatically generated keys.
dbMaintainer.updateSequences.enabled=true
# Fully qualified classname of the implementation of org.unitils.dbmaintainer.sequences.SequenceUpdater
org.unitils.dbmaintainer.structure.SequenceUpdater.implClassName=org.unitils.dbmaintainer.structure.impl.DefaultSequenceUpdater
# Lowest acceptable value of a sequence in a unit test database. The SequenceUpdater will make sure all sequences
# have this value or higher before proceeding
sequenceUpdater.sequencevalue.lowestacceptable=1000

# Fully qualified classname of the implementation of org.unitils.dbmaintainer.clear.DBClearer
org.unitils.dbmaintainer.clean.DBClearer.implClassName=org.unitils.dbmaintainer.clean.impl.DefaultDBClearer
# Fully qualified classname of the implementation of org.unitils.dbmaintainer.clean.DBCleaner.
org.unitils.dbmaintainer.clean.DBCleaner.implClassName=org.unitils.dbmaintainer.clean.impl.DefaultDBCleaner

# Indicates whether the database should be cleaned before data updates are executed by the dbMaintainer. If true, the
# records of all database tables, except the ones listed in 'dbMaintainer.preserve.*' are deleted
dbMaintainer.cleanDb.enabled=true

# Comma separated list of database items that may not be dropped or cleared by the DB maintainer when
# updating the database from scratch (dbMaintainer.fromScratch.enabled=true).
# Schemas can also be preserved entirely. If identifiers are quoted (eg "" for oracle) they are considered
# case sensitive. Items that do not have a schema prefix are considered to be in the default schema, which 
# is the first schema listed in the property database.schemaNames
dbMaintainer.preserve.schemas=
dbMaintainer.preserve.tables=
dbMaintainer.preserve.views=
dbMaintainer.preserve.materializedViews=
dbMaintainer.preserve.synonyms=
dbMaintainer.preserve.sequences=

# Comma separated list of tables that will not be emptied when the db maintainer performs a database
# update, if the property dbMaintainer.cleanDb.enabled is set to true.
# Tables listed here will still be dropped when the db maintainer performs a from scratch update. If this is not desirable
# you should add the tablename to the dbMaintainer.preserve.tables property instead
# Schemas can also be preserved entirely. If identifiers are quoted (eg "" for oracle) they are considered 
# case sensitive. Items that do not have a schema prefix are considered to be in the default schema, which 
# is the first schema listed in the property database.schemaNames
dbMaintainer.preserveDataOnly.schemas=
dbMaintainer.preserveDataOnly.tables=

# If set to true an XSD or DTD will be generated that represents the structure of the database schema. This XSD or DTD can be
# used in datafiles to verify if they are up-to-date and to enable code completion.
dbMaintainer.generateDataSetStructure.enabled=true
# Fully qualified name of the implementation of org.unitils.dbmaintainer.structure.DataSetStructureGenerator that is used.
# org.unitils.dbmaintainer.structure.impl.XsdDataSetStructureGenerator can be used to generate XSDs
# org.unitils.dbmaintainer.structure.impl.DtdDataSetStructureGenerator can be used to generate DTDs
org.unitils.dbmaintainer.structure.DataSetStructureGenerator.implClassName=org.unitils.dbmaintainer.structure.impl.XsdDataSetStructureGenerator
# DbUnit data set dtd file path
dataSetStructureGenerator.dtd.filename=
# DbUnit data set xsd file path
dataSetStructureGenerator.xsd.dirName=./target/xsd
# Suffix to use when generating complex types for tables
dataSetStructureGenerator.xsd.complexTypeSuffix=__type

### \u9ed8\u8ba4\u7684\u4e8b\u52a1\u6a21\u5f0f ###
# Default behavior concerning execution of tests in a transaction. Supported values are 'disabled', 'commit' and 'rollback'.
# If set to disabled, test are not executed in a transaction by default. If set to commit, each test is run in a transaction,
# which is committed. If set to rollback, each test is run in a transaction, which is rolled back. 
transactional.mode.default=rollback

### InjectModule configuration ###
# Mode of accessing properties
InjectModule.InjectIntoStatic.restore.default=old_value
InjectModule.InjectIntoByType.propertyAccess.default=field
InjectModule.InjectIntoStaticByType.restore.default=old_value
InjectModule.InjectIntoStaticByType.propertyAccess.default=field
InjectModule.TestedObject.createIfNull.enabled=true

#log4j.xml.file=classpath:org/jtester/utility/log4j.xml
log4j.xml.file=

dbfit.dir=target/dbfit
dbexport.auto=true
dbexport.script=true

#\u662f\u5426\u5bf9Connection\u548cStatement\u5bf9\u8c61\u8fdb\u884c\u4ee3\u7406
#\u53ea\u6709\u8bbe\u7f6e\u4e86 database.prxoy.enabled=true,\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 tracer.database=true\u548c\u4ee3\u7801\u4e2d\u7684\u8bbe\u7f6e@Tracer(jdbc=true)\u624d\u6709\u610f\u4e49
database.prxoy.enabled=true
tracer.database=false
tracer.springbean=false